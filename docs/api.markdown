# 接口说明文档
*Document generated by protoc-gen-markdown at 2022/05/15 19:04:52. DO NOT EDIT.* 



<a name="top"></a>
> 接口列表


* 单次任务接口
    * [创建任务](单次任务接口/创建任务.md) - [(/api/once_job/create)](单次任务接口/创建任务.md)
    * [更新任务](单次任务接口/更新任务.md) - [(/api/once_job/update)](单次任务接口/更新任务.md)
    * [删除任务](单次任务接口/删除任务.md) - [(/api/once_job/delete/job_id)](单次任务接口/删除任务.md)
    * [任务列表](单次任务接口/任务列表.md) - [(/api/once_job/lists)](单次任务接口/任务列表.md)
* 周期任务接口
    * [周期任务列表](周期任务接口/周期任务列表.md) - [(/api/cron_job/lists)](周期任务接口/周期任务列表.md)
    * [周期任务信息](周期任务接口/周期任务信息.md) - [(/api/cron_job/describe/job_id)](周期任务接口/周期任务信息.md)
    * [创建周期任务列表](周期任务接口/创建周期任务列表.md) - [(/api/cron_job/create)](周期任务接口/创建周期任务列表.md)
    * [更新周期任务列表](周期任务接口/更新周期任务列表.md) - [(/api/cron_job/update)](周期任务接口/更新周期任务列表.md)
    * [删除周期任务列表](周期任务接口/删除周期任务列表.md) - [(/api/cron_job/delete/job_id)](周期任务接口/删除周期任务列表.md)
* 任务日志接口
    * [任务运行日志](任务日志接口/任务运行日志.md) - [(/api/job_logs/job_id)](任务日志接口/任务运行日志.md)
<!-- 接口信息 -->
<!-- 切割 -->
# 单次任务接口
<!-- 切割 -->
## 创建任务
### <h3 id="/api/once_job/create">接口说明</h3>
 *  创建即刻或定时Job, 任务存储延迟队列中待时间到达下发任务.
 *  job和pod labels中有Job_from、Job_id、job_name、job_type等字段标注.
 *  当pod通知运行完成或者失败后, 带有采集标识的会采集容器运行日志并回传, 失败默认采集.
 *  当配置回调地址, job 成功及失败会有回调通知.
 *  事件当中Job创建、完成、失败或者删除等等会通知到服务端, 更新Job信息.
### HTTP Gateway
 * URI: /api/once_job/create
 * Method: POST




### 请求类型: ***CreateRequest***
>内容详情

CreateRequest

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| job_name | string | string | 任务名称 | true |
| job_exec_time | string | string | 执行时间 | true |
| namespace | string | string | 命名空间 | true |
| image | string | string | 镜像名称 | true |
| command | string | string | 执行命令 逗号分隔命令 例: 'echo,k8s jobs !!!' | true |
| timeout | int64 | int | 执行超时时间 指job执行时间 | false |
| metadata |  map CreateRequest.MetadataEntry  |  map CreateRequest.MetadataEntry  | labels、annotations: 注解与labels<br>parallelism: 并行数 默认:1<br>completions: 执行成功次数 默认:1<br>restart_policy: 重启策略: 默认Never<br>active_deadline_seconds: 执行超时时间 默认:5分钟<br>backoff_limit: 重试次数 默认:1<br>ttl_seconds_after_finished: job 结束回收时间 默认:5分钟<br>envs: 环境变量 json<br>log_collect: 是否采集日志 默认:false<br>args: 执行参数 逗号分隔<br>callback_url: job执行状态回调地址 | false |
| route | string | string | 分发到特定集群,<br>值为: config.Client.ID | false |

CreateRequest.MetadataEntry

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| key | string | string |  | true |
| value | string | string |  | true |


>JSON 示例
```json
{
    "command": "string",
    "image": "string",
    "job_exec_time": "string",
    "job_name": "string",
    "metadata": {
        "key": "string",
        "value": "string"
    },
    "namespace": "string",
    "route": "string",
    "timeout": 1
}
```

### 返回类型: ***CreateResponse***
> 内容详情

CreateResponse

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| code | int64 | int |  状态码 |
| cause | string | string |  失败原因 |
| error_msg | string | string |  失败信息 |
| data | Create | Create |  数据 |

Create

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| job_id | string | string |  任务id |

>JSON 示例
```json
{
    "cause": "string",
    "code": 1,
    "data": {
        "job_id": "string"
    },
    "error_msg": "string"
}
```

***
<!-- 切割 -->
## 更新任务
### <h3 id="/api/once_job/update">接口说明</h3>
 *  k8s job支持更新的数据有限, 非使用update接口.
 *  更新流程先删除旧任务且重新分发job任务.
 *  注意: 当任务处于提交未创建阶段, 无法删除.
### HTTP Gateway
 * URI: /api/once_job/update
 * Method: POST




### 请求类型: ***UpdateRequest***
>内容详情

UpdateRequest

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| job_id | string | string | 任务id | true |
| job_name | string | string | 任务名称 | true |
| job_exec_time | string | string | 执行时间 | true |
| namespace | string | string | 命名空间 | true |
| image | string | string | 镜像名称 | true |
| command | string | string | 执行命令 逗号分隔命令 例: 'echo,k8s jobs !!!' | true |
| timeout | int64 | int | 执行超时时间 指job执行时间 | false |
| metadata |  map UpdateRequest.MetadataEntry  |  map UpdateRequest.MetadataEntry  | labels、annotations: 注解与labels<br>parallelism: 并行数 默认:1<br>completions: 执行成功次数 默认:1<br>restart_policy: 重启策略: 默认Never<br>active_deadline_seconds: 执行超时时间 默认:5分钟<br>backoff_limit: 重试次数 默认:1<br>ttl_seconds_after_finished: job 结束回收时间 默认:5分钟<br>envs: 环境变量 json<br>log_collect: 是否采集日志 默认:false<br>args: 执行参数 逗号分隔<br>callback_url: job执行状态回调地址 | false |
| route | string | string | 分发到特定集群,<br>值为: config.Client.ID | false |

UpdateRequest.MetadataEntry

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| key | string | string |  | true |
| value | string | string |  | true |


>JSON 示例
```json
{
    "command": "string",
    "image": "string",
    "job_exec_time": "string",
    "job_id": "string",
    "job_name": "string",
    "metadata": {
        "key": "string",
        "value": "string"
    },
    "namespace": "string",
    "route": "string",
    "timeout": 1
}
```

### 返回类型: ***UpdateResponse***
> 内容详情

UpdateResponse

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| code | int64 | int |  状态码 |
| cause | string | string |  失败原因 |
| error_msg | string | string |  失败信息 |
| data | string | string |  数据 |

>JSON 示例
```json
{
    "cause": "string",
    "code": 1,
    "data": "string",
    "error_msg": "string"
}
```

***
<!-- 切割 -->
## 删除任务
### <h3 id="/api/once_job/delete/job_id">接口说明</h3>
 *  注意: 当任务处于提交未创建阶段, 无法删除.
### HTTP Gateway
 * URI: /api/once_job/delete/job_id
 * Method: POST




### 请求类型: ***DeleteRequest***
>内容详情

DeleteRequest

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| job_id | string | string | 任务id | true |


>JSON 示例
```json
{
    "job_id": "string"
}
```

### 返回类型: ***DeleteResponse***
> 内容详情

DeleteResponse

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| code | int64 | int |  状态码 |
| cause | string | string |  失败原因 |
| error_msg | string | string |  失败信息 |
| data | Create | Create |  数据 |

Create

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| job_id | string | string |  任务id |

>JSON 示例
```json
{
    "cause": "string",
    "code": 1,
    "data": {
        "job_id": "string"
    },
    "error_msg": "string"
}
```

***
<!-- 切割 -->
## 任务列表
### <h3 id="/api/once_job/lists">接口说明</h3>
 *  查看当前的单次任务.
### HTTP Gateway
 * URI: /api/once_job/lists
 * Method: POST




### 请求类型: ***ListRequest***
>内容详情

ListRequest

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| page_num | int64 | int | 当前页数 | true |
| page_size | int64 | int | 每页数量 | true |


>JSON 示例
```json
{
    "page_num": 1,
    "page_size": 1
}
```

### 返回类型: ***ListOnceJobResponse***
> 内容详情

ListOnceJobResponse

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| code | int64 | int |  状态码 |
| cause | string | string |  失败原因 |
| data | Data | Data |  数据 |

Data

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| total | string | string |  总数 |
| page_num | int64 | int |  当前页数 |
| page_size | int64 | int |  每页数量 |
| data |   array [OnceJob]  |   array [OnceJob]  |  数据 |

OnceJob

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| id | int64 | int |  id |
| job_id | string | string |  job_id |
| job_name | string | string |  任务名称 |
| job_exec_time | int64 | int |  执行时间 |
| namespace | string | string |  命名空间 |
| metadata | string | string |  metadata |
| image | string | string |  镜像 |
| command | string | string |  命令 |
| timeout | int64 | int |  超时时间 |
| job_status | int64 | int |  job 状态 |
| job_exec_information | string | string |  执行信息 |
| job_times | int64 | int |  创建次数 |
| job_success_times | int64 | int |  成功次数 |
| create_time | int64 | int |  创建时间 |
| update_time | int64 | int |  更新时间 |

>JSON 示例
```json
{
    "cause": "string",
    "code": 1,
    "data": {
        "data": [
            {
                "command": "string",
                "create_time": 1,
                "id": 1,
                "image": "string",
                "job_exec_information": "string",
                "job_exec_time": 1,
                "job_id": "string",
                "job_name": "string",
                "job_status": 1,
                "job_success_times": 1,
                "job_times": 1,
                "metadata": "string",
                "namespace": "string",
                "timeout": 1,
                "update_time": 1
            }
        ],
        "page_num": 1,
        "page_size": 1,
        "total": "string"
    }
}
```

***
<!-- 切割 -->
# 周期任务接口
<!-- 切割 -->
## 周期任务列表
### <h3 id="/api/cron_job/lists">接口说明</h3>
 * 暂无
### HTTP Gateway
 * URI: /api/cron_job/lists
 * Method: POST




### 请求类型: ***TODO***
>内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|


>JSON 示例
```json
{}
```

### 返回类型: ***TODO***
> 内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------| ------------|

>JSON 示例
```json
{}
```

***
<!-- 切割 -->
## 周期任务信息
### <h3 id="/api/cron_job/describe/job_id">接口说明</h3>
 * 暂无
### HTTP Gateway
 * URI: /api/cron_job/describe/job_id
 * Method: POST




### 请求类型: ***TODO***
>内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|


>JSON 示例
```json
{}
```

### 返回类型: ***TODO***
> 内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------| ------------|

>JSON 示例
```json
{}
```

***
<!-- 切割 -->
## 创建周期任务列表
### <h3 id="/api/cron_job/create">接口说明</h3>
 * 暂无
### HTTP Gateway
 * URI: /api/cron_job/create
 * Method: POST




### 请求类型: ***TODO***
>内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|


>JSON 示例
```json
{}
```

### 返回类型: ***TODO***
> 内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------| ------------|

>JSON 示例
```json
{}
```

***
<!-- 切割 -->
## 更新周期任务列表
### <h3 id="/api/cron_job/update">接口说明</h3>
 * 暂无
### HTTP Gateway
 * URI: /api/cron_job/update
 * Method: POST




### 请求类型: ***TODO***
>内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|


>JSON 示例
```json
{}
```

### 返回类型: ***TODO***
> 内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------| ------------|

>JSON 示例
```json
{}
```

***
<!-- 切割 -->
## 删除周期任务列表
### <h3 id="/api/cron_job/delete/job_id">接口说明</h3>
 * 暂无
### HTTP Gateway
 * URI: /api/cron_job/delete/job_id
 * Method: POST




### 请求类型: ***TODO***
>内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|


>JSON 示例
```json
{}
```

### 返回类型: ***TODO***
> 内容详情

TODO

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------| ------------|

>JSON 示例
```json
{}
```

***
<!-- 切割 -->
# 任务日志接口
<!-- 切割 -->
## 任务运行日志
### <h3 id="/api/job_logs/job_id">接口说明</h3>
 *  查询任务运行日志.
### HTTP Gateway
 * URI: /api/job_logs/job_id
 * Method: POST




### 请求类型: ***LogRequest***
>内容详情

LogRequest

| 字段 | protobuf 类型 | json 类型 | 说明 | 是否必传 |
| ----------- | ------------ | ------------- | ------------- | ------------|
| job_id | string | string | 任务id | true |


>JSON 示例
```json
{
    "job_id": "string"
}
```

### 返回类型: ***LogResponse***
> 内容详情

LogResponse

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| code | int64 | int |  状态码 |
| data |   array [Log]  |   array [Log]  |  数据 |
| cause | string | string |  失败原因 |

Log

| 字段 | protobuf 类型 | json 类型 | 说明 |
| ----- | ---- | ----- | ----- |
| id | int64 | int |  id |
| pod_name | string | string |  pod名称 |
| run_logs | string | string |  运行日志 |
| create_time | int64 | int |  创建时间 |

>JSON 示例
```json
{
    "cause": "string",
    "code": 1,
    "data": [
        {
            "create_time": 1,
            "id": 1,
            "pod_name": "string",
            "run_logs": "string"
        }
    ]
}
```

***
<!-- 自定义状态码 -->
<!-- 切割 -->
# 自定义状态码
| 名称 | 状态码 | 描述 |
| ---- | ------ | ----------- |
| Zero | 0 | 无效 |
| InvalidParameter | 100 | 无效参数 |
| JobIdError | 101 | job_id 为空 |
| BodyReadError | 102 | body 读取错误 |
| BodyDecodeError | 103 | 解码错误 |
| VerifyJobError | 104 | job 验证错误 |
| AlreadyExistsError | 105 | 数据已存在 |
| ServerClosedError | 106 | 服务正在关闭 |
| ForwarderUrlError | 107 | 转发错误 |
| PublishError | 251 | 推送错误 |
| GenJobError | 252 | 生成job 错误 |
| DeleteJobTimeoutError | 253 | 删除job 超时 |
| JobSubmittedError | 254 | job 提交错误 |
| DeleteJobError | 255 | job 删除错误 |

<!-- 公共状态码 -->
<!-- 切割 -->
# 公共状态码
* 0-99 保留
* 10-199 公共状态码 (每个服务都会有这种错误的放在公共状态码)

| 名称 | 状态码 | 描述 |
| ---- | ------ | ----------- |
| SUCCESS |  0  |  请求成功    |
| PARAM_ERR |  100  |  参数错误    |
| IP_ILLEGAL |  102  |  非法IP    |
| OVERTIME |  103  |  请求超时    |
| LIMITED_FLOW |  104  |  请求限流    |
| UNKNOWN_ERR |  110  |  未知错误    |
| DECODE_ERR |  120  |  请求解码错误    |
| ENCODE_ERR |  130  |  请求成功    |
<!-- proto 对应各语言的类型表 -->
<!-- 切割 -->
# proto 对应各语言的类型表
| .proto Type | Go | C++ Type | Java Type | Python Type | C# | PHP | Ruby |Notes
| ----------- | -------- | --------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |
| <div style="width: 80%"><h4 id="double" /></div><a name="double" /> double | float64 | double | double | float | double | float | Float |  |
| <div style="width: 80%"><h4 id="float" /></div><a name="float" /> float | float32 | float | float | float | float | float | Float |  |
| <div style="width: 80%"><h4 id="int32" /></div><a name="int32" /> int32 | int32 | int32 | int | int | int | integer | Bignum or Fixnum (as required) | Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. |
| <div style="width: 80%"><h4 id="int64" /></div><a name="int64" /> int64 | int64 | int64 | long | int/long | long | integer/string | Bignum | Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. |
| <div style="width: 80%"><h4 id="uint32" /></div><a name="uint32" /> uint32 | uint32 | uint32 | int | int/long | uint | integer | Bignum or Fixnum (as required) | Uses variable-length encoding. |
| <div style="width: 80%"><h4 id="uint64" /></div><a name="uint64" /> uint64 | uint64 | uint64 | long | int/long | ulong | integer/string | Bignum or Fixnum (as required) | Uses variable-length encoding. |
| <div style="width: 80%"><h4 id="sint32" /></div><a name="sint32" /> sint32 | int32 | int32 | int | int | int | integer | Bignum or Fixnum (as required) | Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. |
| <div style="width: 80%"><h4 id="sint64" /></div><a name="sint64" /> sint64 | int64 | int64 | long | int/long | long | integer/string | Bignum | Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. |
| <div style="width: 80%"><h4 id="fixed32" /></div><a name="fixed32" /> fixed32 | uint32 | uint32 | int | int | uint | integer | Bignum or Fixnum (as required) | Always four bytes. More efficient than uint32 if values are often greater than 2^28. |
| <div style="width: 80%"><h4 id="fixed64" /></div><a name="fixed64" /> fixed64 | uint64 | uint64 | long | int/long | ulong | integer/string | Bignum | Always eight bytes. More efficient than uint64 if values are often greater than 2^56. |
| <div style="width: 80%"><h4 id="sfixed32" /></div><a name="sfixed32" /> sfixed32 | int32 | int32 | int | int | int | integer | Bignum or Fixnum (as required) | Always four bytes. |
| <div style="width: 80%"><h4 id="sfixed64" /></div><a name="sfixed64" /> sfixed64 | int64 | int64 | long | int/long | long | integer/string | Bignum | Always eight bytes. |
| <div style="width: 80%"><h4 id="bool" /></div><a name="bool" /> bool | bool | bool | boolean | boolean | bool | boolean | TrueClass/FalseClass |  |
| <div style="width: 80%"><h4 id="string" /></div><a name="string" /> string | string | string | String | str/unicode | string | string | String (UTF-8) | A string must always contain UTF-8 encoded or 7-bit ASCII text. |
| <div style="width: 80%"><h4 id="bytes" /></div><a name="bytes" /> bytes | []byte | string | ByteString | str | ByteString | string | String (ASCII-8BIT) | May contain any arbitrary sequence of bytes. |

